#!/usr/bin/env node
var program = require('commander');
var fs = require('fs');
var async = require("async");

program
  .command('download <org> <project_name> <shortsha>')
  .description('download a version of your application that corresponds to the git shortsha') .option("-i, --install", "Will also run the special dist_install.js script after download")
  .action(downloadShort);

program
  .command('setup')
  .description('Configures machine for use with a distdown sftp server')
  .option("-o, --overwrite", "Over write ~/.distdownrc")
  .action(setup);      



  program.parse(process.argv);

  if(!program.args.length) program.help();

  function downloadShort(shortsha, options){
    console.log("Downloading shortsha from sftp server ", shortsha);

  }

  function setup(env, options){
    console.log(this); 
    var settings = options.overwrite && fs.existsSync('./.distdownrc');

    if(settings){
      console.log("Using local distdown config already");
      return;
    }

    settings = options.overwrite && fs.existsSync(process.env.HOME + '/.distdownrc');
   
    if(settings){
      console.log("Using ~/.distdownrc config already");
      return;
    }

    var config;

    function getData (cb){
      async.series({
        ipport: function(cb){
          process.stdout.write("Enter distdown server ip (sftp ip:port): ");
          ask(function(ipport){
            cb(null, ipport);
          });
        },
        keyPath: function(cb){
          process.stdout.write("Enter distdown key ['~/.ssh/id_rsa']: ");
          ask(function(keyPath){
            if(keyPath === '') keyPath = process.env.HOME + '/.ssh/id_rsa';
            cb(null, keyPath);
          });
        }
      },
      function(err, results){
        console.log("Using server: " + results.ipport + " key: " + results.keyPath);
        config = results;
        cb(err, results);
      });
    }

    function writeConfigFile(config, cb){
      var path = process.env.HOME + '/.distdownrc'; 
      console.log("creating config file ~/.distdownrc");
      console.log(process.env);
      fs.writeFile(path,JSON.stringify(config, null, 4), function(err){
        if(err){
          console.log(err);
          cb(err);
        }else {
          console.log("Wrote to ~/.distdownrc");
          cb(err);
        }
      });
    }
   
    async.waterfall([
      getData,
      writeConfigFile
    ], 
    function(err, results){

      console.log("Setup complete, please use distdown create to set up a project release directory");

    });


        
     
  }


function ask(cb){

  process.stdin.setEncoding('utf8');
  process.stdin.once('data', function(data){
    data = data.toString().trim();
    process.stdin.pause();
    cb(data);
  });
  process.stdin.resume(); 
}
